angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(e){e.$on("login",function(n,t){e.currentUser=t})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(e,n){e.login=function(t,r){n.login(t,r).then(function(n){e.$emit("login",n.data)})}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(e,n){e.register=function(t,r,o,s,a,i,u,c,l,p,f,g){n.register(t,r,o,s,a,i,u,c,l,p,f,g).then(function(n){e.$emit("login",n)})}}]),angular.module("app").filter("newLine",["$filter",function(){return function(e){return e?e.replace(/\n\r?/g,"<br>"):e}}]).controller("RequestsCtrl",["$scope","RequestsSvc",function(e,n){e.makeRequest=function(){e.requestText&&n.create({username:e.currentUser.username,subject:e.requestSubject,toEmail:e.requestEmail,replied:!1,requestFull:"My name is "+e.currentUser.username+" and I am a "+e.currentUser.position+" at "+e.currentUser.organization+". I am requesting the following information under the "+e.currentUser.state+" Freedom of Information Act: \n \n"+e.requestText+"\n \nI ask that you waive any and all fees associated with the gathering of this information as I am collecting and reporting on this information in the public interest. \n I also ask that you cite reasons for any redactions pursuant to Illinois FOIA law. \n My contact info is as follows: \n"+e.currentUser.username+"\n"+e.currentUser.addressLineOne+"\n"+e.currentUser.addressLineTwo+"\n"+e.currentUser.city+","+e.currentUser.state+" "+e.currentUser.postal+"\nPhone: "+e.currentUser.phone+"\n\nMuch appreciated,\n"+e.currentUser.username,response:"There is no response yet.",attachment:"There is no attachment."}).success(function(){e.requestText=null,e.requestSubject=null,e.requestEmail=null})},n.fetch().success(function(n){e.requests=n}),e.$on("ws:new_post",function(n,t){e.$apply(function(){e.requests.unshift(t)})})}]),angular.module("app").service("RequestsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/requests")},this.create=function(n){return e.post("/api/requests",n)}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"RequestsCtrl",templateUrl:"requests.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(e){var n=this;n.getUser=function(){return e.get("/api/users",{headers:{"X-Auth":this.token}})},n.login=function(t,r){return e.post("/api/sessions",{email:t,password:r}).then(function(t){return n.token=t.data,e.defaults.headers.common["X-Auth"]=t.data,n.getUser()})},n.register=function(t,r,o,s,a,i,u,c,l,p,f,g){return console.log(t,r,g),e.post("/api/users",{email:t,password:r,username:o+" "+s,addressLineOne:a,addressLineTwo:i,city:u,state:c,postal:l,organization:p,position:f,phone:g}).then(function(){return n.login(t,r)})}}]),angular.module("app").run(["$rootScope","$timeout",function(e,n){!function t(){var r="ws://localhost:3000",o=new WebSocket(r);o.onclose=function(){console.log("WebSocket closed. Reconnection..."),n(t,1e4)},o.onmessage=function(n){var t=JSON.parse(n.data);e.$broadcast("ws:"+t.topic,t.data)}}()}]);
//# sourceMappingURL=data:application/json;base64,